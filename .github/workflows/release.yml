name: Build and attach release ZIP
on:
    push:
        tags:
            - "v*"
            - "[0-9]*"
    release:
        types: [published]
    workflow_dispatch:

permissions:
    contents: write

jobs:
    build-zip:
        runs-on: ubuntu-latest
        env:
            PLUGIN_SLUG: smart-section-toc
            MAIN_FILE: smart-section-toc.php
        steps:
            - name: Checkout (tag/release ref)
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.ref }}
                  fetch-depth: 0

            - name: Setup PHP (for version parsing)
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.3"

            - name: Locate plugin main file and read Version
              id: ver
              run: |
                  set -eo pipefail
                  # 1) Find plugin main file
                  if [ -f "$MAIN_FILE" ]; then
                    FILE="$MAIN_FILE"
                  elif [ -f "$PLUGIN_SLUG/$MAIN_FILE" ]; then
                    FILE="$PLUGIN_SLUG/$MAIN_FILE"
                  else
                    echo "::error::Could not find $MAIN_FILE in repo root or $PLUGIN_SLUG/"
                    echo "Repo root listing:"; ls -la
                    echo "$PLUGIN_SLUG/ listing:"; ls -la "$PLUGIN_SLUG" || true
                    exit 1
                  fi
                  echo "Using file: $FILE"
                  echo "Absolute path: $(realpath "$FILE")"

                  # 2) Debug file content
                  echo "----- First 80 lines of $FILE -----"
                  head -n 80 "$FILE" || true
                  echo "----- All Version: occurrences -----"
                  grep -n -i 'Version:' "$FILE" || echo "No Version: lines found"

                  # 3) Extract version with robust PHP parser
                  VERSION=$(php -r "
                    \$content = file_get_contents('$FILE');
                    if (\$content === false) {
                      fwrite(STDERR, \"ERROR: Could not read file: $FILE\\n\");
                      exit(1);
                    }
                    // Normalize (BOM, NBSP, tabs, CRLF)
                    \$content = preg_replace('/^\xEF\xBB\xBF/', '', \$content);
                    \$content = str_replace([\"\xC2\xA0\", \"\t\"], [' ', ' '], \$content);
                    \$content = preg_replace('/\r\n?/', \"\n\", \$content);
                    // Match 'Version:' with or without '*'
                    if (preg_match('/^\s*(?:\*\s*)?Version:\s*([0-9][^\r\n]*?)\s*$/mi', \$content, \$m)) {
                      echo trim(\$m[1]);
                    } else {
                      fwrite(STDERR, \"ERROR: No Version header found in $FILE\\n\");
                      exit(1);
                    }
                  " 2>&1)

                  if [ $? -ne 0 ]; then
                    echo "::error::PHP version parsing failed: $VERSION"
                    exit 1
                  fi

                  if [ -z "$VERSION" ]; then
                    echo "::error::Empty version extracted from $FILE"
                    exit 1
                  fi

                  echo "âœ… Detected plugin version: $VERSION"
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: Determine tag (supports tag push & release)
              id: tag
              run: |
                  if [ -n "${{ github.event.release.tag_name }}" ]; then
                    RAW="${{ github.event.release.tag_name }}"
                  else
                    RAW="${GITHUB_REF##*/}"
                  fi
                  echo "Raw tag: $RAW"
                  TAG="${RAW#v}"
                  echo "tag=$TAG" >> $GITHUB_OUTPUT
                  echo "Normalized tag (no 'v'): $TAG"

            - name: Validate version == tag
              run: |
                  echo "Version from file: ${{ steps.ver.outputs.version }}"
                  echo "Version from tag : ${{ steps.tag.outputs.tag }}"
                  if [ "${{ steps.ver.outputs.version }}" != "${{ steps.tag.outputs.tag }}" ]; then
                    echo "::error::Version (${{ steps.ver.outputs.version }}) does not match tag (${{ steps.tag.outputs.tag }})"
                    exit 1
                  fi

            - name: Prepare build folder
              run: |
                  set -e
                  mkdir -p build/${{ env.PLUGIN_SLUG }}
                  rsync -av \
                    --exclude '.git*' \
                    --exclude '.github' \
                    --exclude '.vscode' \
                    --exclude '.idea' \
                    --exclude 'node_modules' \
                    --exclude 'tests' \
                    --exclude 'build' \
                    --exclude '.DS_Store' \
                    ./ build/${{ env.PLUGIN_SLUG }}

            - name: Create ZIP
              run: |
                  cd build
                  zip -r "${{ env.PLUGIN_SLUG }}.zip" "${{ env.PLUGIN_SLUG }}"

            - name: Create or update GitHub Release and attach ZIP
              uses: softprops/action-gh-release@v2
              with:
                  files: build/${{ env.PLUGIN_SLUG }}.zip
                  generate_release_notes: true
