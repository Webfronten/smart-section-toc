name: Build and attach release ZIP

on:
  push:
    tags:
      - 'v*'               # Kør når du pusher et tag (fx fra Tower Git-Flow)
  release:
    types: [published]     # ...eller når du publicerer en release i UI
  workflow_dispatch:       # Manuel kørsel hvis nødvendigt

permissions:
  contents: write          # Nødvendigt for at oprette/ændre releases og uploade assets

jobs:
  build-zip:
    runs-on: ubuntu-latest
    env:
      PLUGIN_SLUG: smart-section-toc
      MAIN_FILE: smart-section-toc.php

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Determine version & tag
        run: |
          if [ -f "$MAIN_FILE" ]; then
            FILE="$MAIN_FILE"
          elif [ -f "$PLUGIN_SLUG/$MAIN_FILE" ]; then
            FILE="$PLUGIN_SLUG/$MAIN_FILE"
          else
            echo "Could not find $MAIN_FILE"; exit 1
          fi

          VERSION=$(php -r "preg_match('/^\\s*Version:\\s*(.+)$/mi', file_get_contents(getenv('FILE')), \$m); echo isset(\$m[1]) ? trim(\$m[1]) : '';")
          if [ -z "$VERSION" ]; then echo "No Version found in $FILE"; exit 1; fi

          if [ "${GITHUB_REF##*/}" != "" ]; then
            REF="${GITHUB_REF##*/}"
            TAG="${REF#v}"
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            TAG="${{ github.event.release.tag_name }}"
            TAG="${TAG#v}"
          else
            echo "No tag found"; exit 1
          fi

          echo "Version: $VERSION / Tag: $TAG"
          if [ "$VERSION" != "$TAG" ]; then
            echo "Version ($VERSION) does not match tag ($TAG)"; exit 1
          fi

      - name: Prepare build folder
        run: |
          mkdir -p build/$PLUGIN_SLUG
          rsync -av \
            --exclude '.git*' \
            --exclude '.github' \
            --exclude '.vscode' \
            --exclude '.idea' \
            --exclude 'node_modules' \
            --exclude 'tests' \
            --exclude 'build' \
            --exclude '.DS_Store' \
            ./ build/$PLUGIN_SLUG

      - name: Create ZIP
        run: |
          cd build
          zip -r "$PLUGIN_SLUG.zip" "$PLUGIN_SLUG"

      - name: Upload artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_SLUG }}-zip
          path: build/${{ env.PLUGIN_SLUG }}.zip
          if-no-files-found: error

      - name: Create or update GitHub Release and attach ZIP
        uses: softprops/action-gh-release@v2
        with:
          files: build/${{ env.PLUGIN_SLUG }}.zip
          generate_release_notes: true
