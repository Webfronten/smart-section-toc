- name: Locate plugin main file and read Version
  id: ver
  run: |
    set -eo pipefail
    
    # 1) Find plugin main file
    if [ -f "$MAIN_FILE" ]; then
      FILE="$MAIN_FILE"
    elif [ -f "$PLUGIN_SLUG/$MAIN_FILE" ]; then
      FILE="$PLUGIN_SLUG/$MAIN_FILE"
    else
      echo "::error::Could not find $MAIN_FILE in repo root or $PLUGIN_SLUG/"
      echo "Repo root listing:"; ls -la
      echo "$PLUGIN_SLUG/ listing:"; ls -la "$PLUGIN_SLUG" || true
      exit 1
    fi
    
    echo "Using file: $FILE"
    echo "Absolute path: $(realpath "$FILE")"
    
    # 2) Debug file content
    echo "----- First 80 lines of $FILE -----"
    head -n 80 "$FILE" || true
    echo "----- All Version: occurrences -----"
    grep -n -i 'Version:' "$FILE" || echo "No Version: lines found"
    
    # 3) Extract version with robust PHP parser
    VERSION=$(php -r "
      \$content = file_get_contents('$FILE');
      if (\$content === false) { 
        fwrite(STDERR, \"ERROR: Could not read file: $FILE\\n\"); 
        exit(1); 
      }
      
      // Normalize content: remove BOM, convert NBSP/tabs to spaces, normalize line endings
      \$content = preg_replace('/^\xEF\xBB\xBF/', '', \$content);
      \$content = str_replace([\"\xC2\xA0\", \"\t\"], [' ', ' '], \$content);
      \$content = preg_replace('/\r\n?/', \"\n\", \$content);
      
      // Match WordPress plugin version header (with or without * prefix)
      if (preg_match('/^\s*(?:\*\s*)?Version:\s*([0-9][^\r\n]*?)\s*$/mi', \$content, \$matches)) {
        echo trim(\$matches[1]);
      } else {
        fwrite(STDERR, \"ERROR: No Version header found in $FILE\\n\");
        exit(1);
      }
    " 2>&1)
    
    # Check if PHP command succeeded
    if [ $? -ne 0 ]; then
      echo "::error::PHP version parsing failed: $VERSION"
      exit 1
    fi
    
    if [ -z "$VERSION" ]; then
      echo "::error::Empty version extracted from $FILE"
      exit 1
    fi
    
    echo "âœ… Detected plugin version: $VERSION"
    echo "version=$VERSION" >> $GITHUB_OUTPUT
